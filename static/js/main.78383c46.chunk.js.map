{"version":3,"sources":["VisViewer.js","InformationPanel.js","App.js","reportWebVitals.js","index.js"],"names":["VisViewer","props","useEffect","console","log","filePath","id","style","minHeight","height","className","title","src","width","border","InformationPanel","useState","inputFile","setInputFile","fileList","setFileList","fileData","setFileData","proteinData","setProteomics","size","undefined","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","fetchstring","process","fetch","headers","Accept","then","response","json","data","files","fileCallback","newFile","obj","find","o","name","split","DataPanelSection","selectRef","useRef","onChange","current","value","ref","map","file","i","unit","description","ProteomicsPanelSection","protein","num","probability","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78383c46.chunk.js","sourcesContent":["import React, { Fragment, useEffect } from 'react';\r\nimport './LavaVu-amalgamated.css'\r\nexport const VisViewer = (props) => {\r\n\r\n    useEffect(() => {\r\n        console.log(props.filePath)\r\n    }, [props.filePath])\r\n\r\n    return (\r\n        <div id=\"vis-panel\" style={{minHeight: props.height}}>\r\n            { props.filePath ?\r\n                <Fragment>\r\n                    <h3>Showing <span className=\"fileNameString\">{props.filePath} </span></h3>\r\n                    {props.height}\r\n\r\n                    <iframe title=\"Viewer\" id=\"frame1\" className=\"resized\" src={\"./webview.html?\" + props.filePath + \"&background=white\"} style={{ width: '100%', height: '100%', minHeight: props.height-100, border: '1px solid #888' }}>\r\n                    </iframe>\r\n                </Fragment>\r\n                :\r\n                <div className=\"selectPrompt\"> Please select a file </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React, { useRef, useState, useEffect } from 'react';\r\n\r\nimport { VisViewer } from './VisViewer.js'\r\nexport const InformationPanel = () => {\r\n    const [inputFile, setInputFile] = useState()\r\n    const [fileList, setFileList] = useState([])\r\n    const [fileData, setFileData] = useState()\r\n    const [proteinData, setProteomics] = useState()\r\n    const size = useWindowSize();\r\n\r\n    useEffect(() => {\r\n        //fetches a list of files to display for the user for selection. in the database, there will probably be a job to run to create a file, or several if several sources, like this as well.\r\n        // currently these are just testing files located in the public folder.\r\n\r\n        let fetchstring = process.env.PUBLIC_URL + '/data/listOfFiles.json';\r\n        console.log('Fetching ' + fetchstring);\r\n        fetch(fetchstring, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n        }).then(response => response.json())\r\n            .then(data => setFileList(data.files));\r\n\r\n    }, []) //does this only once on load\r\n\r\n\r\n    const changeInputFile = (newFile) => {\r\n        console.log(newFile)\r\n        let obj = fileList.find(o => o.name === newFile);\r\n        //set the new file data\r\n        setFileData(obj)\r\n        setInputFile(\"data/\" + newFile)\r\n\r\n\r\n        //load the proteomics data\r\n        let fetchstring = process.env.PUBLIC_URL + '/data/proteomics/' + newFile.split(\".\")[0] + \".json\";  //loads the available data for the file, with the matching name --- should probably be a unique ID instead!\r\n        fetch(fetchstring, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n        }).then(response => response.json())\r\n            .then(data => setProteomics(data));\r\n    }\r\n\r\n    return (\r\n        <div id=\"root\" className=\"flex\">\r\n            <div id=\"menu\">\r\n                <DataPanelSection fileList={fileList} fileCallback={changeInputFile} inputFile={inputFile} fileData={fileData} />\r\n                <ProteomicsPanelSection proteinData={proteinData} />\r\n\r\n            </div>\r\n            <VisViewer filePath={inputFile} height={size.height} />\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nfunction useWindowSize() {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState({\r\n      width: undefined,\r\n      height: undefined,\r\n    });\r\n    useEffect(() => {\r\n      // Handler to call on window resize\r\n      function handleResize() {\r\n        // Set window width/height to state\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        });\r\n      }\r\n      // Add event listener\r\n      window.addEventListener(\"resize\", handleResize);\r\n      // Call handler right away so state gets updated with initial window size\r\n      handleResize();\r\n      // Remove event listener on cleanup\r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return windowSize;\r\n  }\r\n\r\nconst DataPanelSection = ({ fileList, fileCallback, fileData }) => {\r\n\r\n\r\n    const selectRef = useRef();\r\n    const onChange = () => {\r\n        //console.log(selectRef.current.value)\r\n        fileCallback(selectRef.current.value)\r\n    }\r\n\r\n    return (\r\n        <aside className=\"infoPanelSection\">\r\n            <h3>File</h3>\r\n\r\n            <select\r\n                className=\"dropdown-medium\"\r\n\r\n                onChange={onChange}\r\n                ref={selectRef}\r\n            >\r\n                {fileList.map((file, i) => (\r\n\r\n                    <option key={'file' + i} value={file.name}>\r\n\r\n                        {file.name}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n            {fileData ?\r\n                <section id=\"fileInfo\">\r\n                    <div className=\"attributeRow\">\r\n                        <span className=\"attributeLabel\">File Size</span>\r\n                        <span className=\"attributeValue\">{fileData.size} {fileData.unit} </span>\r\n                    </div>\r\n                    {fileData.description ?\r\n                        <div className=\"attributeRow\">\r\n                            <span className=\"attributeLabel\"> Description </span>\r\n                            <span className=\"attributeValue\">{fileData.description} </span>\r\n                        </div>\r\n                        : \"\"}\r\n\r\n                </section>\r\n                : \"\"}\r\n        </aside>\r\n    )\r\n}\r\n\r\nconst ProteomicsPanelSection = ({ proteinData }) => {\r\n    return (\r\n        <aside className=\"infoPanelSection\">\r\n            <h3>Proteomics</h3>\r\n            {proteinData ?\r\n                <table className=\"proteinList\">\r\n                    <tr><th>Protein</th><th>#</th> <th>Probability</th></tr>\r\n                    {proteinData.map((protein, i) => (\r\n\r\n                       <tr className=\"proteinListElement\" key={'file' + i} value={protein.name}>\r\n                                <td>{protein.name}</td>\r\n                                <td>{protein.num}</td>\r\n                                <td>{protein.probability}</td>\r\n                        </tr>\r\n                    ))}\r\n                </table>\r\n                : \"\"}\r\n        </aside>\r\n    )\r\n}","\nimport './App.css';\n\nimport React from 'react';\n\nimport {InformationPanel} from './InformationPanel.js'\n\nfunction App() {\n  return (\n   \n      <InformationPanel />\n      \n\n \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}